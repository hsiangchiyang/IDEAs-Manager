{
  "openapi": "3.0.1",
  "info": {
    "title": "Sample Nodejs GraphQL Server",
    "description": "This is a sample server using Nodejs, Express, and GraphQL.",
    "contact": {
      "email": "hsiang.jyang@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:3000/api"
    }
  ],
  "tags": [
    {
      "name": "idea",
      "description": "APIs for idea"
    },
    {
      "name": "user",
      "description": "APIs for user"
    }
  ],
  "paths": {
    "/idea/{id}": {
      "get": {
        "tags": [
          "idea"
        ],
        "summary": "Find idea by ID",
        "description": "Returns a single idea",
        "operationId": "getIdeaById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of idea to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Idea"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Idea not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ideas": {
      "get": {
        "tags": [
          "idea"
        ],
        "summary": "Find all ideas",
        "description": "Returns all ideas",
        "operationId": "getIdeas",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Idea"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Idea not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/addIdea": {
      "post": {
        "tags": [
          "idea"
        ],
        "summary": "Add new idea",
        "description": "Add single new idea",
        "operationId": "addIdea",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "title of the new idea",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "query",
            "description": "body of the new idea",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userID of the owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Idea"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Idea not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find all users",
        "description": "Returns all users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Permission Denied",
            "content": {}
          },
          "404": {
            "description": "Idea not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/addUser": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add new idea",
        "description": "Add single new idea",
        "operationId": "addUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "username of the new user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "email of the new user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "password of the new user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Idea not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "Idea": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}